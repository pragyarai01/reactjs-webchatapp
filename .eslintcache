[{"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\reportWebVitals.js":"1","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\App.js":"2","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\index.js":"3","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Messages.js":"4","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Input.js":"5","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Mileage.js":"6","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Map.js":"7","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Home.js":"8","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\ShowMap.js":"9","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Navbar.js":"10","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\history.js":"11","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Dialog.js":"12","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Cardcomponent.js":"13","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\reportWebVitals.js":"14","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Dialog.js":"15","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Input.js":"16","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Mileage.js":"17","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\App.js":"18","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Cardcomponent.js":"19","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\history.js":"20","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Home.js":"21","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Map.js":"22","C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\ShowMap.js":"23"},{"size":362,"mtime":1608794067665,"results":"24","hashOfConfig":"25"},{"size":1069,"mtime":1609139224769,"results":"26","hashOfConfig":"25"},{"size":593,"mtime":1608973223828,"results":"27","hashOfConfig":"25"},{"size":1545,"mtime":1609140569355,"results":"28","hashOfConfig":"25"},{"size":2062,"mtime":1609146434376,"results":"29","hashOfConfig":"25"},{"size":4223,"mtime":1609147237739,"results":"30","hashOfConfig":"25"},{"size":12991,"mtime":1609149352758,"results":"31","hashOfConfig":"25"},{"size":2916,"mtime":1609141179453,"results":"32","hashOfConfig":"25"},{"size":2171,"mtime":1609148676622,"results":"33","hashOfConfig":"25"},{"size":795,"mtime":1609092337834,"results":"34","hashOfConfig":"25"},{"size":518,"mtime":1609007701043,"results":"35","hashOfConfig":"25"},{"size":5034,"mtime":1609149434406,"results":"36","hashOfConfig":"25"},{"size":3330,"mtime":1609146331232,"results":"37","hashOfConfig":"25"},{"size":362,"mtime":1608794067665,"results":"38","hashOfConfig":"39"},{"size":3340,"mtime":1609162808289,"results":"40","hashOfConfig":"39"},{"size":2134,"mtime":1609163179860,"results":"41","hashOfConfig":"39"},{"size":4223,"mtime":1609147237739,"results":"42","hashOfConfig":"39"},{"size":690,"mtime":1609162481521,"results":"43","hashOfConfig":"39"},{"size":2702,"mtime":1609162590701,"results":"44","hashOfConfig":"39"},{"size":410,"mtime":1609162841897,"results":"45","hashOfConfig":"39"},{"size":1226,"mtime":1609162915014,"results":"46","hashOfConfig":"39"},{"size":7796,"mtime":1609164311811,"results":"47","hashOfConfig":"39"},{"size":2145,"mtime":1609164510220,"results":"48","hashOfConfig":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1wqa7b0",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jboezq",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\reportWebVitals.js",[],["97","98"],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\App.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\index.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Messages.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Input.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Mileage.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Map.js",["99"],"import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\n// @ts-ignore\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nimport { Button } from 'react-bootstrap';\r\nimport history from './history';\r\n\r\nGeocode.setApiKey(\"AIzaSyAkoe98NAkKlGghynXBqFjVdMrYK4RDoOI\");\r\nGeocode.enableDebug()\r\n\r\nclass Map extends React.Component{\r\n    constructor( props ){\r\n        super( props );\r\n        this.state = {\r\n         address: '',\r\n         startaddress: '',\r\n         endaddress: '',\r\n         city: '',\r\n         area: '',\r\n         state: '',\r\n         startPosition:{\r\n             lat:0,\r\n             lng:0\r\n         },\r\n         endPosition:{\r\n            lat:0,\r\n            lng:0\r\n         },\r\n         mapPosition: {\r\n          lat: this.props.center.lat,\r\n          lng: this.props.center.lng\r\n         },\r\n         markerPosition: {\r\n          lat: this.props.center.lat,\r\n          lng: this.props.center.lng\r\n      },\r\n        }\r\n       }\r\n     \r\n       componentDidMount() {\r\n        console.log(\"map props\",this.props)\r\n        Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n         response => {\r\n          const address = response.results[0].formatted_address,\r\n           addressArray =  response.results[0].address_components,\r\n           city = this.getCity( addressArray ),\r\n           area = this.getArea( addressArray ),\r\n           state = this.getState( addressArray );\r\n         \r\n          console.log( 'city', city, area, state );\r\n        \r\n          this.setState( {\r\n           address: ( address ) ? address : '',\r\n           startaddress : ( address ) ? address : '',\r\n           area: ( area ) ? area : '',\r\n           city: ( city ) ? city : '',\r\n           state: ( state ) ? state : '',\r\n           startPosition: this.state.mapPosition,\r\n          } )\r\n         },\r\n         error => {\r\n          console.error(error);\r\n         }\r\n        );\r\n       };\r\n      \r\n       shouldComponentUpdate( nextProps, nextState ){\r\n        if (\r\n         this.state.markerPosition.lat !== this.props.center.lat ||\r\n         this.state.address !== nextState.address ||\r\n         this.state.city !== nextState.city ||\r\n         this.state.area !== nextState.area ||\r\n         this.state.state !== nextState.state\r\n        ) {\r\n         return true\r\n        } else if ( this.props.center.lat === nextProps.center.lat ){\r\n         return false\r\n        }\r\n       }\r\n       getCity = ( addressArray ) => {\r\n        let city = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n         if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n          city = addressArray[ i ].long_name;\r\n          return city;\r\n         }\r\n        }\r\n       };\r\n\r\n       getArea = ( addressArray ) => {\r\n        let area = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n         if ( addressArray[ i ].types[0]  ) {\r\n          for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n           if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n            area = addressArray[ i ].long_name;\r\n            return area;\r\n           }\r\n          }\r\n         }\r\n        }\r\n       };\r\n      \r\n       getState = ( addressArray ) => {\r\n        let state = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n         for( let i = 0; i < addressArray.length; i++ ) {\r\n          if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n           state = addressArray[ i ].long_name;\r\n           return state;\r\n          }\r\n         }\r\n        }\r\n       };\r\n    //    rad(x){\r\n    //     return x * Math.PI / 180;\r\n    // }\r\n    //   getDistance(p1, p2){\r\n    //     var R = 6378137; // Earth’s mean radius in meter\r\n    //     var dLat = this.rad(p2.lat() - p1.lat());\r\n    //     var dLong = this.rad(p2.lng() - p1.lng());\r\n    //     var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + \r\n    //             Math.cos(this.rad(p1.lat())) * Math.cos(this.rad(p2.lat())) *\r\n    //             Math.sin(dLong / 2) * Math.sin(dLong / 2);\r\n    //     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    //     var d = (R * c) / 1609  ;\r\n    //     return Math.round(d); \r\n    // }\r\n    getDistance(lat1, lon1, lat2, lon2) {\r\n        var radlat1 = Math.PI * lat1/180\r\n        var radlat2 = Math.PI * lat2/180\r\n        var theta = lon1-lon2\r\n        var radtheta = Math.PI * theta/180\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        dist = Math.acos(dist)\r\n        dist = dist * 180/Math.PI\r\n        dist = dist * 60 * 1.1515 * 0.8684\r\n       // if (unit==\"K\") { dist = dist * 1.609344 }\r\n       // if (unit==\"M\") { dist = dist * 0.8684 }\r\n        return Math.round(dist)\r\n    }\r\n       onClick(){\r\n           console.log(\"p1\",this.state.startPosition)\r\n           console.log(\"p2\",this.state.endPosition)\r\n           var miles = this.getDistance(this.state.startPosition.lat,this.state.startPosition.lng,this.state.endPosition.lat,this.state.endPosition.lng)\r\n           console.log(\"MILESSS\",miles)\r\n           history.push('/form',{showinfo:true,name: this.props.navigation.name,startadd:this.state.startaddress,endadd:this.state.endaddress,mileage: miles})\r\n           \r\n       }\r\n       onChangeStart = ( event ) => {\r\n        this.setState({ startaddress: event.target.value });\r\n       };\r\n       onChangeEnd = ( event ) => {\r\n        this.setState({ endaddress: event.target.value });\r\n       };\r\n       onInfoWindowClose = ( event ) => {\r\n      };\r\n      \r\n onMarkerDragEnd = ( event ) => {\r\n    console.log( 'event', event );\r\n    let newLat = event.latLng.lat(),\r\n     newLng = event.latLng.lng(),\r\n     addressArray = [];\r\n  Geocode.fromLatLng( newLat , newLng ).then(\r\n     response => {\r\n      const address = response.results[0].formatted_address,\r\n       addressArray =  response.results[0].address_components,\r\n       city = this.getCity( addressArray ),\r\n       area = this.getArea( addressArray ),\r\n       state = this.getState( addressArray );\r\n  this.setState( {\r\n       address: ( address ) ? address : '',\r\n       area: ( area ) ? area : '',\r\n       city: ( city ) ? city : '',\r\n       state: ( state ) ? state : ''\r\n      } )\r\n     },\r\n     error => {\r\n      console.error(error);\r\n     }\r\n    );\r\n   };\r\n\r\n onPlaceSelectedStart = ( place ) => {\r\n     console.log(\"place\",place)\r\n    const address = place.formatted_address,\r\n       addressArray =  place.address_components,\r\n       city = this.getCity( addressArray ),\r\n       area = this.getArea( addressArray ),\r\n       state = this.getState( addressArray ),\r\n       position = place.geometry.location,\r\n       latValue = place.geometry.location.lat(),\r\n       lngValue = place.geometry.location.lng();\r\n    // Set these values in the state.\r\n      this.setState({\r\n       address: ( address ) ? address : '',\r\n       startaddress : ( address ) ? address : '',\r\n       area: ( area ) ? area : '',\r\n       city: ( city ) ? city : '',\r\n       state: ( state ) ? state : '',\r\n       startPosition: position,\r\n       markerPosition: {\r\n        lat: latValue,\r\n        lng: lngValue\r\n       },\r\n       mapPosition: {\r\n        lat: latValue,\r\n        lng: lngValue\r\n       },\r\n      })\r\n     };\r\nonPlaceSelectedEnd = ( place ) => {\r\n        console.log(\"place\",place)\r\n       const address = place.formatted_address,\r\n          addressArray =  place.address_components,\r\n          city = this.getCity( addressArray ),\r\n          area = this.getArea( addressArray ),\r\n          state = this.getState( addressArray ),\r\n          latValue = place.geometry.location.lat(),\r\n          lngValue = place.geometry.location.lng();\r\n       // Set these values in the state.\r\n         this.setState({\r\n          address: ( address ) ? address : '',\r\n          endaddress : ( address ) ? address : '',\r\n          area: ( area ) ? area : '',\r\n          city: ( city ) ? city : '',\r\n          state: ( state ) ? state : '',\r\n          endPosition:  {\r\n            lat: latValue,\r\n            lng: lngValue\r\n           },\r\n          markerPosition: {\r\n           lat: latValue,\r\n           lng: lngValue\r\n          },\r\n          mapPosition: {\r\n           lat: latValue,\r\n           lng: lngValue\r\n          },\r\n         })\r\n    };    \r\n    \r\n        \r\n\r\n      render(){\r\n      const AsyncMap = withScriptjs(\r\n         withGoogleMap(\r\n          props => (\r\n           <GoogleMap google={this.props.google}\r\n            defaultZoom={this.props.zoom}\r\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n           >\r\n               {/*Marker*/}\r\n      <Marker google={this.props.google}\r\n       name={'Dolores park'}\r\n          draggable={true}\r\n          onDragEnd={ this.onMarkerDragEnd }\r\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n      />\r\n      <Marker />\r\n      {/* InfoWindow on top of marker */}\r\n      <InfoWindow\r\n       onClose={this.onInfoWindowClose}\r\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n      >\r\n       <div>\r\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n       </div>\r\n      </InfoWindow>\r\n      <Autocomplete\r\n       style={{\r\n        width: '100%',\r\n        height: '40px',\r\n        paddingLeft: '16px',\r\n        marginTop: '2px',\r\n        marginBottom: '10px'\r\n       }}\r\n       apiKey='AIzaSyAkoe98NAkKlGghynXBqFjVdMrYK4RDoOI'\r\n    //    onPlaceSelected={this.state.startaddress === '' ? this.onPlaceSelectedStart :this.onPlaceSelectedEnd }\r\n    onPlaceSelected={this.onPlaceSelectedEnd }   \r\n    types={['(regions)']}\r\n      />\r\n      </GoogleMap>\r\n      )\r\n         )\r\n        );\r\n      let map;\r\n        if( this.props.center.lat !== undefined ) {\r\n         map = <div>\r\n           <div>\r\n           {/* onClick={() => history.push('/',{name: this.props.navigation.name,startadd:this.state.startaddress,endadd:this.state.endaddress})}  */}\r\n           {/* <Button variant=\"secondary\" onClick={() => history.goBack({steeee:\"yes\"})} >Select</Button> */}\r\n           <Button variant=\"primary\" onClick={()=> this.onClick() }\r\n            >\r\n                CONFIRM INFO</Button> \r\n            {/* <div className=\"form-group\">\r\n             <label htmlFor=\"\">City</label>\r\n             <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n             <label htmlFor=\"\">Area</label>\r\n             <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n             <label htmlFor=\"\">State</label>\r\n             <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n            </div> */}\r\n            {console.log(\"startstate\",this.state.startaddress)}\r\n            { console.log(\"endstate\",this.state.endaddress)}\r\n           \r\n           \r\n           <AsyncMap\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAkoe98NAkKlGghynXBqFjVdMrYK4RDoOI&libraries=places\"\r\n            //googleMapURL='https://maps.google.com/maps?q=London,%20United%20Kingdom&Roadmap&z=10&ie=UTF8&iwloc=&output=embed'\r\n            loadingElement={\r\n             <div style={{ height: `100%` }} />\r\n            }\r\n            containerElement={\r\n             <div style={{ height: this.props.height }} />\r\n            }\r\n            mapElement={\r\n             <div style={{ height: `100%` }} />\r\n            }\r\n           />\r\n\r\n          <div className=\"form-group\" style={{\r\n        width: '100%',\r\n        //height: '30px',\r\n        //paddingLeft: '16px',\r\n        marginTop: '100px',\r\n        ///marginBottom: '100px'\r\n       }}>\r\n             <label htmlFor=\"\"> Start Address</label>\r\n             <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChangeStart } readOnly=\"readOnly\" value={ this.state.startaddress } placeholder=\"Search for start location\"/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n             <label htmlFor=\"\">End Address</label>\r\n             <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChangeEnd } readOnly=\"readOnly\"  value={ this.state.endaddress } placeholder=\"Search for end location\"/>\r\n            </div>\r\n           </div>\r\n          </div>\r\n      } else {\r\n         map = <div style={{height: this.props.height,backgroundColor:'blue'}} />\r\n        }\r\n        return( map )\r\n       }\r\n      }\r\n      export default Map\r\n","F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Home.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\ShowMap.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Navbar.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\history.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Dialog.js",[],"F:\\PATIENTAPP\\react-chat\\chat-app\\src\\Cardcomponent.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Dialog.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Input.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Mileage.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Cardcomponent.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\history.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Home.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\Map.js",[],"C:\\Users\\HP\\Desktop\\reactjs-webchatapp\\src\\ShowMap.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":164,"column":6,"nodeType":"106","messageId":"107","endLine":164,"endColumn":18},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'addressArray' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]